<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.boyouquan.dao.BlogDaoMapper">
    <sql id="insert_columns">
        domain_name,
        admin_email,
        name,
        address,
        rss_address,
        description,
        self_submitted,
        collected_at,
        updated_at,
        valid,
        draft,
        deleted
    </sql>
    <sql id="select_columns">
        domain_name as domainName,
        admin_email as adminEmail,
        name,
        address,
        rss_address as rssAddress,
        description,
        self_submitted as selfSubmitted,
        collected_at as collectedAt,
        updated_at as updatedAt,
        valid,
        gravatar_valid as gravatarValid,
        draft,
        deleted
    </sql>
    <select id="listPopularBlogs" resultType="com.boyouquan.model.PopularBlog">
        select distinct t.blog_domain_name as blogDomainName, max(t.active_time) as latestActiveTime, type from (

        (select distinct m.blog_domain_name, max(m.created_at) as active_time, 'moment' as type from moment m
        inner join blog b on m.blog_domain_name = b.domain_name
        where m.deleted = false
        and b.draft = false
        and b.deleted = false
        and b.valid = true
        and b.gravatar_valid = true
        group by m.blog_domain_name
        order by max(m.created_at) desc
        limit 20)

        union all

        (select distinct p.blog_domain_name, max(p.published_at) as active_time, 'post' as type from post p
        inner join blog b on p.blog_domain_name = b.domain_name
        where p.deleted = false
        and p.draft = false
        and b.draft = false
        and b.deleted = false
        and b.valid = true
        and b.gravatar_valid = true
        group by p.blog_domain_name
        order by max(p.published_at) desc
        limit 20)

        ) t
        group by t.blog_domain_name
        order by max(t.active_time) desc
        limit #{limit}
    </select>
    <select id="listByRandom" resultType="com.boyouquan.model.Blog">
        SELECT
        <include refid="select_columns"/>
        FROM blog
        WHERE draft=false
        AND deleted=false
        AND gravatar_valid=#{gravatarValid}
        <if test="excludedDomainNames != null and excludedDomainNames.size() > 0">
            AND domain_name NOT IN
            <foreach collection="excludedDomainNames" index="index" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ORDER BY RAND() LIMIT #{limit}
    </select>
    <select id="countAll" resultType="java.lang.Long">
        SELECT
        COUNT(1)
        FROM blog
        WHERE draft=false
        AND deleted=false
    </select>
    <select id="listAll" resultType="com.boyouquan.model.Blog">
        SELECT
        <include refid="select_columns"/>
        FROM blog
        WHERE draft=false
        AND deleted=false
    </select>
    <select id="listRecentCollected" resultType="com.boyouquan.model.Blog">
        SELECT
        <include refid="select_columns"/>
        FROM blog
        WHERE draft=false
        AND deleted=false
        ORDER BY collected_at DESC
        LIMIT #{limit}
    </select>
    <select id="countWithKeyword" resultType="java.lang.Long">
        SELECT
        COUNT(*)
        FROM blog
        WHERE draft=false
        AND deleted=false
        <if test="keyword != null and keyword !=''">
            AND
            (
            name LIKE CONCAT('%', #{keyword}, '%')
            OR address LIKE CONCAT('%', #{keyword}, '%')
            )
        </if>
    </select>
    <select id="listWithKeyWord" resultType="com.boyouquan.model.Blog">
        <choose>
            <when test="sort == null or sort == 'collect_time'">
                SELECT
                <include refid="select_columns"/>
                FROM blog
                WHERE draft=false
                AND deleted=false
                <if test="keyword != null and keyword != ''">
                    AND
                    (
                    name LIKE CONCAT('%', #{keyword}, '%')
                    OR address LIKE CONCAT('%', #{keyword}, '%')
                    )
                </if>
                ORDER BY collected_at DESC
                LIMIT #{offset}, #{rows}
            </when>
            <when test="sort == 'access_count'">
                SELECT
                <include refid="select_columns"/>
                FROM blog b
                LEFT JOIN (
                SELECT blog_domain_name, sum(amount) as count
                FROM access
                GROUP BY blog_domain_name
                ) a
                ON b.domain_name=a.blog_domain_name
                WHERE b.draft=false
                AND b.deleted=false
                <if test="keyword != null and keyword != ''">
                    AND
                    (
                    b.name LIKE CONCAT('%', #{keyword}, '%')
                    OR b.address LIKE CONCAT('%', #{keyword}, '%')
                    )
                </if>
                ORDER BY a.count DESC
                LIMIT #{offset}, #{rows}
            </when>
            <otherwise>
                SELECT
                <include refid="select_columns"/>
                FROM blog b
                INNER JOIN domain_name_info d
                ON b.domain_name=d.blog_domain_name
                WHERE b.draft=false
                AND b.deleted=false
                <if test="keyword != null and keyword != ''">
                    AND
                    (
                    b.name LIKE CONCAT('%', #{keyword}, '%')
                    OR b.address LIKE CONCAT('%', #{keyword}, '%')
                    )
                </if>
                ORDER BY d.registered_at
                LIMIT #{offset}, #{rows}
            </otherwise>
        </choose>
    </select>
    <select id="listBlogCollectedAt" resultType="com.boyouquan.model.BlogCollectedAt">
        SELECT
        domain_name AS domainName,
        collected_at AS collectedAt
        FROM blog
        GROUP BY domain_name
        ORDER BY collected_at
    </select>
    <select id="existsByDomainName" resultType="boolean">
        SELECT
        EXISTS (
        SELECT 1 FROM blog WHERE domain_name=#{domainName}
        )
    </select>
    <select id="existsByRssAddress" resultType="boolean">
        SELECT
        EXISTS (
        SELECT 1 FROM blog WHERE rss_address=#{rssAddress}
        )
    </select>
    <select id="getByDomainName" resultType="com.boyouquan.model.Blog">
        SELECT
        <include refid="select_columns"/>
        FROM blog
        WHERE draft=false
        AND deleted=false
        AND domain_name=#{domainName}
    </select>
    <select id="listByAdminEmail" resultType="com.boyouquan.model.Blog">
        SELECT
        <include refid="select_columns"/>
        FROM blog
        WHERE draft=false
        AND deleted=false
        AND admin_email=#{adminEmail}
    </select>
    <select id="getByShortDomainName" resultType="com.boyouquan.model.Blog">
        SELECT
        <include refid="select_columns"/>
        FROM blog
        WHERE draft=false
        AND deleted=false
        AND domain_name LIKE CONCAT(#{shortDomainName}, '%')
    </select>
    <select id="getByAddress" resultType="com.boyouquan.model.Blog">
        SELECT
        <include refid="select_columns"/>
        FROM blog
        WHERE address=#{address}
    </select>
    <select id="getByRSSAddress" resultType="com.boyouquan.model.Blog">
        SELECT
        <include refid="select_columns"/>
        FROM blog
        WHERE rss_address=#{rssAddress}
    </select>
    <select id="getByMd5AdminEmail" resultType="com.boyouquan.model.Blog">
        SELECT
        <include refid="select_columns"/>
        FROM blog
        WHERE md5(admin_email)=#{md5AdminEmail}
    </select>
    <select id="getJoinYearsByDomainName" resultType="java.lang.Integer">
        SELECT
        TIMESTAMPDIFF(YEAR, collected_at, CURDATE())
        FROM blog
        WHERE draft=false
        AND deleted=false
        AND domain_name=#{domainName}
    </select>
    <insert id="save">
        INSERT INTO blog (
        <include refid="insert_columns"/>
        ) VALUES (
        #{domainName},
        #{adminEmail},
        #{name},
        #{address},
        #{rssAddress},
        #{description},
        #{selfSubmitted},
        #{collectedAt},
        #{updatedAt},
        true,
        #{draft},
        false
        )
    </insert>
    <update id="update">
        UPDATE blog
        SET
        admin_email=#{adminEmail},
        name=#{name},
        address=#{address},
        rss_address=#{rssAddress},
        description=#{description},
        self_submitted=#{selfSubmitted},
        collected_at=#{collectedAt},
        updated_at=now(),
        valid=#{valid},
        draft=#{draft}
        WHERE domain_name=#{domainName}
    </update>
    <update id="updateGravatarValidFlag">
        UPDATE blog
        SET
        gravatar_valid=#{gravatarValid}
        WHERE domain_name=#{domainName}
    </update>
    <delete id="deleteByDomainName">
        DELETE
        FROM blog
        WHERE domain_name=#{domainName}
    </delete>
</mapper>